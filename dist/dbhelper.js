let NUMBEROFRESTAURANTS=10;class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get DATABASE_BASE_URL(){return"http://localhost:1337"}static openIDB(){return idb.open("restaurantReviewsApp",1,e=>{if(!e.objectStoreNames.contains("restaurants")){e.createObjectStore("restaurants",{keyPath:"id"})}if(!e.objectStoreNames.contains("pending-reviews")){e.createObjectStore("pending-reviews",{keyPath:"id",autoIncrement:!0})}for(let t=1;t<NUMBEROFRESTAURANTS;t++)if(!e.objectStoreNames.contains(`reviews-restaurant-${t}`)){e.createObjectStore(`reviews-restaurant-${t}`,{keyPath:"id",autoIncrement:!0})}})}static deleteInIDB(e,t){return DBHelper.openIDB().then(r=>{return r.transaction(e,"readwrite").objectStore(t).clear().complete})}static loadFromIDB(e,t){return DBHelper.openIDB().then(r=>{return r.transaction(e).objectStore(t).getAll()})}static saveToIDB(e,t,r){return DBHelper.openIDB().then(n=>{if(!n)return;const a=n.transaction(t,"readwrite"),s=a.objectStore(r);return Array.from(e).forEach(e=>s.put(e)),a.complete})}static saveReviewToIDB(e,t,r){return DBHelper.openIDB().then(n=>{if(!n)return;const a=n.transaction(t,"readwrite");return a.objectStore(r).put(e),a.complete})}static loadFromAPI(e){return fetch(`${DBHelper.DATABASE_BASE_URL}/${e}`).then(e=>e.json()).then(t=>(DBHelper.saveToIDB(t,e,e),t))}static loadReviewsFromAPI(e){return fetch(`${DBHelper.DATABASE_BASE_URL}/${e}`).then(e=>e.json()).then(e=>(DBHelper.saveToIDB(e,`reviews-restaurant-${self.restaurant.id}`,`reviews-restaurant-${self.restaurant.id}`),console.log(`Reviews data from API for restaurant: ${self.restaurant.id}`),console.log(e),e))}static fetchRestaurants(e){DBHelper.loadFromIDB("restaurants","restaurants").then(e=>0==e.length?DBHelper.loadFromAPI("restaurants"):(console.log(`FROM IDB: ${e}`),e)).then(t=>{e(null,t)}).catch(t=>{console.log(`Something is wrong: ${t}`),e(t,null)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){let{photograph:t}=e;return t||(t=10),`/img/${t}.jpg`}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(newMap),r}static fetchReviewsById(e,t){DBHelper.loadFromIDB(`reviews-restaurant-${e}`,`reviews-restaurant-${e}`).then(t=>0==t.length?DBHelper.loadReviewsFromAPI(`reviews/?restaurant_id=${e}`):Promise.resolve(t)).then(e=>{t(null,e)}).catch(e=>{console.log(`ERROR DB: ${e.status}`),t(e,null)})}static postToAPI(e){if(e)return fetch(`${DBHelper.DATABASE_BASE_URL}/reviews`,{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>(DBHelper.saveReviewToIDB(e,`reviews-restaurant-${self.restaurant.id}`,`reviews-restaurant-${self.restaurant.id}`),e)).catch(t=>(DBHelper.saveReviewToIDB(e,"pending-reviews","pending-reviews"),self.pendingReviews||(self.pendingReviews=[]),self.pendingReviews.push(e),console.log(`Error: ${t}`),e))}}